phase_scrambled_corr.correlations
=================================

.. py:module:: phase_scrambled_corr.correlations


Functions
---------

.. autoapisummary::

   phase_scrambled_corr.correlations.phase_scrambled
   phase_scrambled_corr.correlations.cross_correlation
   phase_scrambled_corr.correlations.cross_correlation_maxima
   phase_scrambled_corr.correlations.shift_maximally_correlated
   phase_scrambled_corr.correlations.bootstrap_corr
   phase_scrambled_corr.correlations.bootstrapped_cross_correlation


Module Contents
---------------

.. py:function:: phase_scrambled(signal, fs, remove_mean=True)

   Generate a phase-randomized surrogate of a real-valued time series.

   :param signal: Input time series.
   :type signal: array_like
   :param fs: Sampling frequency (Hz).
   :type fs: float

   :returns: **surrogate** -- Time series with same power spectrum but random phases.
   :rtype: ndarray


.. py:function:: cross_correlation(x, y, dt=1.0, maxlags=None)

   Compute cross-correlation function between two real sequences.

   :param x: Input time series (same length).
   :type x: array_like
   :param y: Input time series (same length).
   :type y: array_like
   :param dt: Time step between samples.
   :type dt: float, default 1.0
   :param maxlags: Maximum lag (in number of samples). Defaults to length-1.
   :type maxlags: int, optional

   :returns: * **lags** (*ndarray*) -- Array of lag times.
             * **ccf** (*ndarray*) -- Cross-correlation coefficients at each lag.


.. py:function:: cross_correlation_maxima(x, y, dt=1.0, maxlags=None)

   Find the lag with maximum cross-correlation.

   :returns: * **lag_max** (*float*) -- Lag time at maximum correlation.
             * **ccf_max** (*float*) -- Maximum correlation coefficient.


.. py:function:: shift_maximally_correlated(x, y, dt=1.0, maxlags=None)

   Shift two series to align at their maximum correlation lag.

   :returns: **x_aligned, y_aligned** -- Truncated arrays of equal length aligned at optimal lag.
   :rtype: ndarray


.. py:function:: bootstrap_corr(x, y, n_iter=1000, fs=1.0, remove_mean=True)

   Estimate null distribution of correlation via phase-randomized surrogates.

   :param x: Input time series.
   :type x: array_like
   :param y: Input time series.
   :type y: array_like
   :param n_iter: Number of surrogate pairs.
   :type n_iter: int
   :param fs: Sampling frequency for phase randomization.
   :type fs: float

   :returns: **corrs** -- Array of correlation coefficients from surrogate pairs.
   :rtype: ndarray


.. py:function:: bootstrapped_cross_correlation(x, y, dt=1.0, maxlags=None, n_iter=1000, return_distributions=False, remove_mean=True)

   Compute cross-correlation function between two real sequences.

   :param x: Input time series (same length).
   :type x: array_like
   :param y: Input time series (same length).
   :type y: array_like
   :param dt: Time step between samples.
   :type dt: float, default 1.0
   :param maxlags: Maximum lag (in number of samples). Defaults to length-1.
   :type maxlags: int, optional

   :returns: * **lags** (*ndarray*) -- Array of lag times.
             * **ccf** (*ndarray*) -- Cross-correlation coefficients at each lag.


